classdef ToolboxTest < matlab.unittest.TestCase
    %TOOLBOXTEST Test the whole toolbox
    %   Detailed explanation goes here
    
    % CHECK the comments to see how to use this toolbox!
    
    % 2014-02-09
    % Yimeng Zhang
    % Computer Science Department, Carnegie Mellon University
    % zym1010@gmail.com
    
    properties
        rootDir
        pngImageDir % instrinc_images_png
        ctxImageDir % instrinc_images_ctx
        ctxMovieDir % stimulus_result
    end
    
    methods (TestClassSetup)
        function addFoldersToPath(testCase)
            testCase.addTeardown(@path, path); % basically, because path function returns the current path.
            % so this is equivalent to.
            % tmp = path; % before all tests.
            % path(tmp); % after all tests.
            [rootDirInner,~,~] = fileparts(mfilename('fullpath')); 
            testCase.rootDir = rootDirInner;
            testCase.pngImageDir = fullfile(rootDirInner,'test_files','instrinc_images_png');
            testCase.ctxImageDir = fullfile(rootDirInner,'test_files','instrinc_images_ctx');
            testCase.ctxMovieDir = fullfile(rootDirInner,'test_files','stimulus_result');
        end
    end
    
    methods (Test)
        function testLoadcx(testCase)
            counter = 0;
            CtxList = dir(testCase.ctxImageDir);
            for iCtx = 1:length(CtxList)
                [~, base_name, ext] = fileparts(CtxList(iCtx).name);
                if isequal(ext, lower('.ctx'))
                    [imgmtx, ~, ~]=ctx_matlab_toolbox.loadcx(...
                        fullfile(testCase.ctxImageDir,CtxList(iCtx).name));
                    imgPng = imread(...
                        fullfile(testCase.pngImageDir,[base_name '.png']));
                    testCase.assertEqual(uint8((imgmtx-128)/127*255),imgPng,...
                        'PNG and input CTX should be the same');
                    % why subtracting 128 then scale 127 then by 255?
                    % because cortex images must take values 128 to 255,
                    % which is mapped to 128 colors in RGB. This is
                    % basically indexed image, and I think Jason configured
                    % the system such that the color table is just a linear
                    % mapping from black to white, so this justifies my
                    % linear scaling.
                    
                    % I can't do the reverse checking, because I thought
                    % these png files were generated by ctx files, and do
                    % the reverse way would not give back the CTX, since
                    % there's rounding on PNG
                    counter = counter+1;
                end
            end
            testCase.assertEqual(counter,78); % number of images in the set.
        end
        
        function testSavecx(testCase)
            % testing if loading and saving are reversible.
            counter = 0;
            CtxList = dir(testCase.ctxImageDir);
            for iCtx = 1:length(CtxList)
                
                [~, ~, ext] = fileparts(CtxList(iCtx).name);
                
                
                if isequal(ext, lower('.ctx'))
                    [imgmtx, dmns, notes]=ctx_matlab_toolbox.loadcx(...
                        fullfile(testCase.ctxImageDir,CtxList(iCtx).name));
                    ctx_matlab_toolbox.savecx('test.ctx',notes,dmns,imgmtx);
                    [imgmtx2, dmns2, notes2]=ctx_matlab_toolbox.loadcx('test.ctx');
                    
                    testCase.assertEqual(imgmtx,imgmtx2);
                    testCase.assertEqual(dmns,dmns2);
                    testCase.assertEqual(notes,notes2);

                    counter = counter+1;
                    delete('test.ctx');
                end
            end
            testCase.assertEqual(counter,78); % number of images in the set.
        end
        
        function testSaveMovie(testCase)
            % test that we can save the movies in 2 ways, either
            % incrementally or in one shot.
            % the test movies are just a bunch of stereogram movies.
            counter = 0;
            CtxList = dir(testCase.ctxMovieDir);
            for iCtx = 1:length(CtxList)
                [~, ~, ext] = fileparts(CtxList(iCtx).name);
                if isequal(ext, lower('.ctx'))
                    [imgmtx, dmns, notes]=ctx_matlab_toolbox.loadcx(...
                        fullfile(testCase.ctxMovieDir,CtxList(iCtx).name));
                    
                    testCase.assertEqual(dmns,[8 128 64 12]);
                    % 8 is bit depth. I guess always 8
                    % 128 is width
                    % 64 is height.
                    % 12 is frame number.
                    testCase.assertEqual(size(imgmtx),[768 128]);
                    % this is saved in [height x frameNumber, width]
                    
                    ctx_matlab_toolbox.savecx('test_movie_1.ctx',notes,dmns,imgmtx);
                    
                    [imgmtx2, dmns2, notes2]=ctx_matlab_toolbox.loadcx('test_movie_1.ctx');
                    
                    testCase.assertEqual(imgmtx,imgmtx2);
                    testCase.assertEqual(dmns,dmns2);
                    testCase.assertEqual(notes,notes2);
                    
                    iFrame = 1;
                    % basically, pick chunks of rows of imgmtx, each chunk
                    % corresponding to one frame.
                    % I just left the notes empty. This makes this function
                    % pair work. No idea what other note can be used.
                    ctx_matlab_toolbox.savecx_movie_firstframe('test_movie_2.ctx','',dmns,...
                        imgmtx((iFrame-1)*64+1:iFrame*64,:));
                    
                    for iFrame = 2:12
                        ctx_matlab_toolbox.savecx_movie_succframe('test_movie_2.ctx','',...
                            dmns,imgmtx((iFrame-1)*64+1:iFrame*64,:));
                    end
                    
                    [imgmtx3, dmns3, notes3]=ctx_matlab_toolbox.loadcx('test_movie_2.ctx');
                    
                    testCase.assertEqual(imgmtx,imgmtx3);
                    testCase.assertEqual(dmns,dmns3);
                    testCase.assertEqual(notes,notes3);
      
                    counter = counter+1;
                    delete('test_movie_1.ctx');
                    delete('test_movie_2.ctx');
                end
            end
            testCase.assertEqual(counter,98); % number of images in the set.
        end
    end
    
    
    
    
end

